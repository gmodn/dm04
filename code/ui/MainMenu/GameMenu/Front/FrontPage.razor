@using System
@using Sandbox;
@using Sandbox.MenuSystem;
@using Sandbox.UI;
@namespace Sandbox.UI.GameMenu
@attribute [StyleSheet]

<root style="flex-direction: column;">

    <div class="game-title">a</div>

    <div class="controls">

        <a class="button" href="/servers">FIND SERVERS</a>

        @if ( Game.InGame )
        {
            <a class="button" href="/active">CURRENT MATCH</a>
            <a class="button" onclick=@LeaveGame>LEAVE MATCH</a>
        }
        else if (Game.Menu.Lobby != null)
        {
            <a class="button" href="/lobby">RETURN TO SERVER</a>
        }
        else
        {
            <a class="button" onclick=@CreateNewLobby>CREATE SERVER</a>

            if (Game.Menu.Package.SupportsSavedGames && Game.Menu.SavedGames.Any())
            {
                <a class="button" onclick=@LoadSavedGame>LOAD GAME</a>
            }
        }


        <a class="button" href="/settings">OPTIONS</a>
        <a class="button" href="/about">ABOUT</a>
        <a class="button" @onclick=@Game.Menu.Close>QUIT</a>

        <a class="audio-button" @onclick=@MusicToggle>TOGGLE MUSIC</a>

    </div>

</root>

@code
{
    void LoadSavedGame()
    {
        this.Navigate( "/load" );
    }

    async Task CreateNewLobby()
    {
        await Game.Menu.CreateLobbyAsync( 64, "game", true );
        // we will navigate to lobby when it's ready
    }

    void LeaveGame()
    {
        Game.Menu.LeaveServer("Leaving");
    }

    public override void Tick()
    {
        base.Tick();
    }

    SoundHandle MenuMusic;

    void MusicToggle()
    {
        if (MenuMusic.IsPlaying)
        {
            MenuMusic.Stop(true);
        }
        else
        {
            MenuMusic = Audio.Play("sounds/menu/MENULOOP.sound");
        }

        // Make sure the Menu Music doesn't play ingame.
        if (Game.InGame)
        {
            MenuMusic.Stop(true);
            return;
        }
    }
}
